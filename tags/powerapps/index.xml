<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>PowerApps on My M365 Insights</title>
        <link>https://www.menzel.it/tags/powerapps/</link>
        <description>Recent content in PowerApps on My M365 Insights</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Wed, 27 Sep 2023 15:56:44 +0200</lastBuildDate><atom:link href="https://www.menzel.it/tags/powerapps/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>How to create a Custom connector for OpenAI in PowerApps</title>
        <link>https://www.menzel.it/post/2023/09/customconnectoropenai/</link>
        <pubDate>Wed, 27 Sep 2023 15:56:44 +0200</pubDate>
        
        <guid>https://www.menzel.it/post/2023/09/customconnectoropenai/</guid>
        <description>&lt;img src="https://www.menzel.it/post/2023/09/customconnectoropenai/Blog_custom-connector.jpeg" alt="Featured image of post How to create a Custom connector for OpenAI in PowerApps" /&gt;&lt;p&gt;I&amp;rsquo;m super excited to share with you a new way to use OpenAI&amp;rsquo;s powerful natural language processing (NLP) capabilities in your PowerApps. In this blog post, I&amp;rsquo;ll show you how to set up a custom connector for OpenAI and how to test it in a canvas app. I&amp;rsquo;ll also give you a brief overview of how to sign up for the OpenAI API, which is currently in beta.&lt;/p&gt;
&lt;h2 id=&#34;what-is-openai-and-why-use-it-in-powerapps&#34;&gt;What is OpenAI and why use it in PowerApps?&lt;/h2&gt;
&lt;p&gt;OpenAI is a research organization that aims to create artificial intelligence (AI). They have developed a general-purpose NLP system called GPT-3/ GPT-4, which can generate coherent and relevant text for a wide range of tasks, such as answering questions, writing summaries, creating content, and more.&lt;/p&gt;
&lt;p&gt;By using OpenAI in PowerApps, you can leverage the power of GPT-3 to enhance your apps with natural language features, such as chatbots, text analysis, content generation, and more. You can also use OpenAI to create dynamic and engaging user experiences that are tailored to your specific needs and goals.&lt;/p&gt;
&lt;h2 id=&#34;how-to-sign-up-for-the-openai-api&#34;&gt;How to sign up for the OpenAI API?&lt;/h2&gt;
&lt;p&gt;To sign up for the OpenAI API, follow these steps:&lt;/p&gt;
&lt;p&gt;Sign up to the official OpenAI platform &lt;a class=&#34;link&#34; href=&#34;https://platform.openai.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://platform.openai.com/&lt;/a&gt;.
Once you’re logged in, navigate to the Personal tab in the top-right section.
Select the View API Keys option from the dropdown.
On the API keys page, click on the Create new secret key button. Remember to store the key somewhere safe as you won’t be able to view it again.
The ChatGPT API allows developers to integrate ChatGPT into their own applications. It’s important to note that the API has its own pricing, which you can find at &lt;a class=&#34;link&#34; href=&#34;https://openai.com/pricing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenAI Pricing&lt;/a&gt;. The ChatGPT API is not included in the ChatGPT Plus subscription and is billed separately.&lt;/p&gt;
&lt;h2 id=&#34;how-to-set-up-a-custom-connector-for-openai&#34;&gt;How to set up a custom connector for OpenAI?&lt;/h2&gt;
&lt;p&gt;Once you have your API key, you can set up a custom connector for OpenAI in PowerApps. A custom connector is a way to connect your app to any web service that has a RESTful API. You can use custom connectors to access data and actions that are not available in the standard connectors.&lt;/p&gt;
&lt;p&gt;To set up a custom connector for OpenAI, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;a class=&#34;link&#34; href=&#34;https://make.powerapps.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://make.powerapps.com/&lt;/a&gt; and sign in with your Microsoft account.&lt;/li&gt;
&lt;li&gt;In the left navigation pane, click on Custom connectors.
&lt;figure class=&#34;my-float-left&#34;&gt;&lt;img src=&#34;SCR-20230927-offd.png&#34;
         alt=&#34;Custom connector&#34; width=&#34;20%&#34;/&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Click on New custom connector &amp;gt; Create from blank.
&lt;figure class=&#34;my-float-left&#34;&gt;&lt;img src=&#34;SCR-20230927-pkic.png&#34;
         alt=&#34;Create from blank&#34; width=&#34;30%&#34;/&gt;
&lt;/figure&gt;

Enter a name for your connector, such as &amp;ldquo;ChatGPT&amp;rdquo;, and click Continue.
&lt;figure class=&#34;my-float-left&#34;&gt;&lt;img src=&#34;SCR-20230927-plig.png&#34;
         alt=&#34;Connector name&#34; width=&#34;40%&#34;/&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;In the General tab, enter the following information:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Description: A brief description of your connector, such as &amp;ldquo;A custom connector for OpenAI&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Host: The base URL of the OpenAI API, which is &amp;ldquo;api.openai.com&amp;rdquo;.
&lt;figure class=&#34;my-float-left&#34;&gt;&lt;img src=&#34;SCR-20230927-pmek.png&#34;
         alt=&#34;General Information&#34; width=&#34;50%&#34;/&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Click on Security&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Authentication type: Select &amp;ldquo;API Key&amp;rdquo; from the drop-down menu.&lt;/li&gt;
&lt;li&gt;Parameter label: The name of the parameter that holds your API key, such as &amp;ldquo;API Key&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Parameter name: The name of the header that holds your API key, which is &amp;ldquo;Authorization&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Parameter location: Select &amp;ldquo;Header&amp;rdquo; from the drop-down menu.
&lt;figure class=&#34;my-float-left&#34;&gt;&lt;img src=&#34;SCR-20230927-pmwf.png&#34;
         alt=&#34;Security&#34; width=&#34;50%&#34;/&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Click on Definition &amp;gt; New action and enter the following information:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Summary: A brief summary of what the action does, such as &amp;ldquo;Generate text using OpenAI&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Description: A detailed description of what the action does, such as &amp;ldquo;Generates text using OpenAI&amp;rsquo;s GPT-3 engine based on a given prompt and parameters&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Operation ID: A unique identifier for the action, such as &amp;ldquo;GenerateText&amp;rdquo;.
&lt;figure class=&#34;my-float-left&#34;&gt;&lt;img src=&#34;SCR-20230927-pnkn.png&#34;
         alt=&#34;Definition&#34; width=&#34;50%&#34;/&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Click on Request &amp;gt; Import from sample and enter the following information:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Verb: Select &amp;ldquo;POST&amp;rdquo; from the drop-down menu.&lt;/li&gt;
&lt;li&gt;URL: The endpoint of the OpenAI API that you want to use, which is &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://api.openai.com/v1/chat/completions%22&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://api.openai.com/v1/chat/completions&#34;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Headers: Leave this blank.&lt;/li&gt;
&lt;li&gt;Body: A sample JSON body that contains the parameters for the text generation, such as:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;model&amp;#34;: &amp;#34;gpt-3.5-turbo&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;messages&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &amp;#34;role&amp;#34;: &amp;#34;user&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &amp;#34;content&amp;#34;: &amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ],
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;temperature&amp;#34;: 1,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;max_tokens&amp;#34;: 256,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;top_p&amp;#34;: 1,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;frequency_penalty&amp;#34;: 0,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;presence_penalty&amp;#34;: 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;figure class=&#34;my-float-left&#34;&gt;&lt;img src=&#34;SCR-20230927-pobx.png&#34;
         alt=&#34;Import from sample&#34; width=&#34;30%&#34;/&gt;
&lt;/figure&gt;

&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;Click on Import and then on Update connector.&lt;/li&gt;
&lt;li&gt;Click on Test &amp;gt; New connection and create a new connection for your connector. Enter your API key in the format &amp;ldquo;Bearer sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;rdquo; (replace the x&amp;rsquo;s with your actual key).&lt;/li&gt;
&lt;li&gt;Enter a sample prompt and parameters in the Request body and click on Test operation.&lt;/li&gt;
&lt;li&gt;You should see a response that contains the generated text in the Response body.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;model: The ChatGPT model that you want to use, such as &amp;ldquo;gpt-3.5-turbo&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;role: The role of the user, such as &amp;ldquo;system&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;content: The prompt that you want to use, such as &amp;ldquo;Hello! How can I assist you today?&amp;rdquo;.
&lt;figure class=&#34;my-float-left&#34;&gt;&lt;img src=&#34;SCR-20230927-pplu.png&#34;
         alt=&#34;Test connection&#34; width=&#34;50%&#34;/&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;13&#34;&gt;
&lt;li&gt;Now copy the response body ,e.g.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;id&amp;#34;: &amp;#34;chatcmpl-83NuxzGRcPdDnA8eHFzYKTZc7ctSK&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;object&amp;#34;: &amp;#34;chat.completion&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;created&amp;#34;: 1695817615,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;model&amp;#34;: &amp;#34;gpt-3.5-turbo-16k-0613&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;choices&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &amp;#34;index&amp;#34;: 0,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &amp;#34;message&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;role&amp;#34;: &amp;#34;assistant&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;content&amp;#34;: &amp;#34;Hello! How can I assist you today?&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      },
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &amp;#34;finish_reason&amp;#34;: &amp;#34;stop&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ],
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;usage&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;prompt_tokens&amp;#34;: 9,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;completion_tokens&amp;#34;: 9,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;total_tokens&amp;#34;: 18
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;and go to the Definition tab. In the Response section, click on Add default response and click on &amp;ldquo;Import from Sample&amp;rdquo;. Enter the copied response body and click Import. This will bring the response body into the connector definition, which will allow you to use it in your app.
&lt;figure class=&#34;my-float-left&#34;&gt;&lt;img src=&#34;SCR-20230927-onbe.png&#34;
         alt=&#34;Default response&#34; width=&#34;50%&#34;/&gt;
&lt;/figure&gt;

14. Please update your connector and you are ready to go.&lt;/p&gt;
&lt;h2 id=&#34;how-to-test-the-custom-connector-in-a-canvas-app&#34;&gt;How to test the custom connector in a canvas app?&lt;/h2&gt;
&lt;p&gt;Now that you have set up your custom connector, you can test it in a canvas app. A canvas app is a type of app that you can build in PowerApps using a drag-and-drop interface. You can use canvas apps to create interactive and user-friendly apps that can run on any device.&lt;/p&gt;
&lt;p&gt;To test the custom connector in a canvas app, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;a class=&#34;link&#34; href=&#34;https://make.powerapps.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://make.powerapps.com/&lt;/a&gt; and sign in with your Microsoft account.&lt;/li&gt;
&lt;li&gt;In the left navigation pane, click on Apps &amp;gt; + New app &amp;gt; Canvas.&lt;/li&gt;
&lt;li&gt;Choose a layout for your app, such as Tablet.&lt;/li&gt;
&lt;li&gt;In the Insert tab, click on Text &amp;gt; Label and add a label to your app.&lt;/li&gt;
&lt;li&gt;In the Properties tab, change the Text property of the label to the variable Name (e.g. Response).&lt;/li&gt;
&lt;li&gt;In the Insert tab, click on Text &amp;gt; Text input and add a text input to your app.&lt;/li&gt;
&lt;li&gt;In the Properties tab, change the Hint text property of the text input to &amp;ldquo;Enter your prompt here&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;In the Insert tab, click on Button and add a button to your app.&lt;/li&gt;
&lt;li&gt;In the Properties tab, change the Text property of the button to &amp;ldquo;Generate&amp;rdquo;.
&lt;figure class=&#34;my-float-left&#34;&gt;&lt;img src=&#34;SCR-20230927-prhk.png&#34;
         alt=&#34;PowerApps Builder&#34; width=&#34;70%&#34;/&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;In the Advanced tab, click on OnSelect and enter the following formula:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Set(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Response,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ChatGPT.ChatGPT(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            model: &amp;#34;gpt-3.5-turbo&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            messages: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                role: &amp;#34;system&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                content: txt_search.Text
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;Now you can test the App by entering a prompt in the text input and clicking on the button. The generated text will be displayed in the label.
&lt;figure class=&#34;my-float-left&#34;&gt;&lt;img src=&#34;SCR-20230927-oqaj.png&#34;
         alt=&#34;Test PowerApp&#34; width=&#34;60%&#34;/&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Using Graph API Calls to the Search Endpoint in PowerApps with Office365Groups.HttpRequest</title>
        <link>https://www.menzel.it/post/2023/08/powerappssearchgraphapi/</link>
        <pubDate>Thu, 10 Aug 2023 16:31:08 +0200</pubDate>
        
        <guid>https://www.menzel.it/post/2023/08/powerappssearchgraphapi/</guid>
        <description>&lt;img src="https://www.menzel.it/post/2023/08/powerappssearchgraphapi/Article-Image.png" alt="Featured image of post Using Graph API Calls to the Search Endpoint in PowerApps with Office365Groups.HttpRequest" /&gt;&lt;p&gt;PowerApps is a powerful tool that allows you to create custom business applications without the need for coding. One of the ways you can enhance your PowerApps is by using Graph API calls to the search endpoint &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://graph.microsoft.com/v1.0/search/query%22&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://graph.microsoft.com/v1.0/search/query&#34;&lt;/a&gt;. In this blog post, we&amp;rsquo;ll show you how to do this using the Office365Groups.HttpRequest and the preview feature &amp;ldquo;ParseJSON function and untyped objects&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;pre-requisites&#34;&gt;Pre-requisites&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Before we get started, you&amp;rsquo;ll need to activate the preview feature &amp;ldquo;ParseJSON function and untyped objects&amp;rdquo; in your PowerApps settings. To do this, go to the Settings menu, browse to Upcoming features, and turn on the setting called ParseJSON function and untyped objects. If this feature is not turned on, the ParseJSON function will not be found in the formula bar.&lt;/li&gt;
&lt;li&gt;You need to add the Office365Groups connector to your PowerApps. To do this, go to the Data menu, and select Office 365 Groups. This will add the connector to your PowerApps.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;my-float-left&#34;&gt;&lt;img src=&#34;./Office365-Connector.png&#34;
         alt=&#34;Adding Office365 Connector&#34; width=&#34;30%&#34;/&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;using-office365groupshttprequest&#34;&gt;Using Office365Groups.HttpRequest&lt;/h2&gt;
&lt;p&gt;The Office365Groups.HttpRequest allows you to make HTTP requests to external services from within your PowerApps. This can be useful when you want to retrieve data from an external source, such as the Graph API.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example of how you might use Office365Groups.HttpRequest to search for a message by its subject:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Set(varRequestBody,&amp;#34;{&amp;#34;&amp;#34;requests&amp;#34;&amp;#34;: [{&amp;#34;&amp;#34;entityTypes&amp;#34;&amp;#34;: [&amp;#34;&amp;#34;message&amp;#34;&amp;#34;], &amp;#34;&amp;#34;query&amp;#34;&amp;#34;: {&amp;#34;&amp;#34;queryString&amp;#34;&amp;#34;: &amp;#34;&amp;#34;subject:Hello&amp;#34;&amp;#34;}}]}&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The code above sets a variable named &lt;code&gt;varRequestBody&lt;/code&gt;. The JSON object contains a single property named requests .The object in the array represent the search request and contains two properties: entityTypes and query. The entityTypes property a string that specifies the type of entity to search for. In this case, the entity type specified is message (Email&amp;rsquo;s). The query property is an object that contains a single property named queryString. The queryString property is a string that specifies the search query to execute. In this case, the search query is &lt;code&gt;subject:Hello&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;87
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;88
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;89
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;90
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Set(varFile,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;data:text/plain;base64,&amp;#34; &amp;amp; With({
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    InputText:varRequestBody,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    AsciiTable:AddColumns(Sequence(2^8,1),&amp;#34;char&amp;#34;,Char(Value)),
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    B64ToBin:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Table(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;A&amp;#34;,bin:&amp;#34;000000&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;B&amp;#34;,bin:&amp;#34;000001&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;C&amp;#34;,bin:&amp;#34;000010&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;D&amp;#34;,bin:&amp;#34;000011&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;E&amp;#34;,bin:&amp;#34;000100&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;F&amp;#34;,bin:&amp;#34;000101&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;G&amp;#34;,bin:&amp;#34;000110&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;H&amp;#34;,bin:&amp;#34;000111&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;I&amp;#34;,bin:&amp;#34;001000&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;J&amp;#34;,bin:&amp;#34;001001&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;K&amp;#34;,bin:&amp;#34;001010&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;L&amp;#34;,bin:&amp;#34;001011&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;M&amp;#34;,bin:&amp;#34;001100&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;N&amp;#34;,bin:&amp;#34;001101&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;O&amp;#34;,bin:&amp;#34;001110&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;P&amp;#34;,bin:&amp;#34;001111&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;Q&amp;#34;,bin:&amp;#34;010000&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;R&amp;#34;,bin:&amp;#34;010001&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;S&amp;#34;,bin:&amp;#34;010010&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;T&amp;#34;,bin:&amp;#34;010011&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;U&amp;#34;,bin:&amp;#34;010100&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;V&amp;#34;,bin:&amp;#34;010101&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;W&amp;#34;,bin:&amp;#34;010110&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;X&amp;#34;,bin:&amp;#34;010111&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;Y&amp;#34;,bin:&amp;#34;011000&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;Z&amp;#34;,bin:&amp;#34;011001&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;a&amp;#34;,bin:&amp;#34;011010&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;b&amp;#34;,bin:&amp;#34;011011&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;c&amp;#34;,bin:&amp;#34;011100&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;d&amp;#34;,bin:&amp;#34;011101&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;e&amp;#34;,bin:&amp;#34;011110&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;f&amp;#34;,bin:&amp;#34;011111&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;g&amp;#34;,bin:&amp;#34;100000&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;h&amp;#34;,bin:&amp;#34;100001&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;i&amp;#34;,bin:&amp;#34;100010&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;j&amp;#34;,bin:&amp;#34;100011&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;k&amp;#34;,bin:&amp;#34;100100&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;l&amp;#34;,bin:&amp;#34;100101&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;m&amp;#34;,bin:&amp;#34;100110&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;n&amp;#34;,bin:&amp;#34;100111&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;o&amp;#34;,bin:&amp;#34;101000&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;p&amp;#34;,bin:&amp;#34;101001&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;q&amp;#34;,bin:&amp;#34;101010&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;r&amp;#34;,bin:&amp;#34;101011&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;s&amp;#34;,bin:&amp;#34;101100&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;t&amp;#34;,bin:&amp;#34;101101&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;u&amp;#34;,bin:&amp;#34;101110&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;v&amp;#34;,bin:&amp;#34;101111&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;w&amp;#34;,bin:&amp;#34;110000&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;x&amp;#34;,bin:&amp;#34;110001&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;y&amp;#34;,bin:&amp;#34;110010&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;z&amp;#34;,bin:&amp;#34;110011&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;0&amp;#34;,bin:&amp;#34;110100&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;1&amp;#34;,bin:&amp;#34;110101&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;2&amp;#34;,bin:&amp;#34;110110&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;3&amp;#34;,bin:&amp;#34;110111&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;4&amp;#34;,bin:&amp;#34;111000&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;5&amp;#34;,bin:&amp;#34;111001&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;6&amp;#34;,bin:&amp;#34;111010&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;7&amp;#34;,bin:&amp;#34;111011&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;8&amp;#34;,bin:&amp;#34;111100&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;9&amp;#34;,bin:&amp;#34;111101&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;+&amp;#34;,bin:&amp;#34;111110&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {b64:&amp;#34;/&amp;#34;,bin:&amp;#34;111111&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    )},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    With({
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    BinRep:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Concat(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        AddColumns(ForAll(Split(InputText,&amp;#34;&amp;#34;), {Result: ThisRecord.Value}),&amp;#34;dec&amp;#34;,LookUp(AsciiTable,char=Result).Value),//Convert text to Ascii character code (decimal)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        Concat(Sequence(8,8,-1),Text(If(And(Mod(dec,Power(2,Value))&amp;gt;=Power(2,Value-1),Mod(dec,Power(2,Value))&amp;lt;Power(2,Value)),1,0)))&amp;amp;&amp;#34;&amp;#34;,&amp;#34;&amp;#34;)//Convert decimal to binary
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        With({b64string:Concat(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            Sequence(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                RoundUp(Len(BinRep)/6,0),0),
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                LookUp(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    B64ToBin,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    bin=Mid(BinRep&amp;amp;Left(&amp;#34;000000&amp;#34;,6-Mod(Len(BinRep),6)),6*Value+1,6) //Left(&amp;#34;000000&amp;#34;....) is padding right with zero
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                ).b64&amp;amp;&amp;#34;&amp;#34;, 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            )},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            b64string&amp;amp;Left(&amp;#34;====&amp;#34;,Mod(4-Mod(Len(b64string),4),4))//Convert binary to base64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        )
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This nice trick I learned from Hiro&amp;rsquo;s Blog - Encode plain text to Base64 - &lt;a class=&#34;link&#34; href=&#34;https://mofumofupower.hatenablog.com/entry/encode_decode&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mofumofupower.hatenablog.com/entry/encode_decode&lt;/a&gt;
The &lt;code&gt;varRequestBody&lt;/code&gt; variable is then used to generate a Base64-encoded string that represents the request body for an HTTP request. This is done by first converting the varRequestBody variable to binary format, then to Base64 format. The resulting Base64 string is then used as the request body for the HTTP request.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Set(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    varResult,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Office365Groups.HttpRequest(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;https://graph.microsoft.com/v1.0/search/query&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;POST&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        varFile
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The HTTP request is sent to the Microsoft Graph API&amp;rsquo;s search endpoint (&lt;code&gt;https://graph.microsoft.com/v1.0/search/query&lt;/code&gt;) using the &lt;code&gt;Office365Groups.HttpRequest&lt;/code&gt; function. The function takes three arguments: the URL of the endpoint, the HTTP method to use (in this case, &lt;code&gt;POST&lt;/code&gt;), and the request body to send with the request.
This whole code can for example be put in a buttons OnSelect property to send the request when the button is clicked.&lt;/p&gt;
&lt;figure class=&#34;my-float-left&#34;&gt;&lt;img src=&#34;SearchBehindButton.png&#34;
         alt=&#34;Button control with OnSelect code&#34;/&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;showing-the-results-in-a-gallery&#34;&gt;Showing the Results in a Gallery&lt;/h2&gt;
&lt;p&gt;Once we&amp;rsquo;ve made our HTTP request and retrieved the result, we can use a gallery to display the results. To do this, we&amp;rsquo;ll need to insert a gallery control to our App and set the &lt;code&gt;Items&lt;/code&gt; property of the gallery to the following. To be able to work with those results, we need to get the resonse body from the HTTP request. This is done by doing one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make the same call in the Graph Explorer and exam the response body from there
&lt;figure class=&#34;my-float-left&#34;&gt;&lt;img src=&#34;Graph-Explorer.png&#34;
             alt=&#34;Picture of the Graph Explorer&#34; width=&#34;60%&#34;/&gt;
    &lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;In PowerApps start the App - Monitor to get the response body from there
&lt;figure class=&#34;my-float-left&#34;&gt;&lt;img src=&#34;Monitor.png&#34;
             alt=&#34;Advanced Tools with PowerApp Monitor&#34; width=&#34;30%&#34;/&gt;
    &lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Table(Index(Table(Index(Table(varResult.value),1).Value.hitsContainers),1).Value.hits)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The &lt;code&gt;varResult&lt;/code&gt; variable is containing the response from the API. The response is expected to be a JSON object that contains a property named &lt;code&gt;value&lt;/code&gt;. The &lt;code&gt;value&lt;/code&gt; property is an array of objects that represent the search results.&lt;/p&gt;
&lt;p&gt;The code uses the &lt;code&gt;Table&lt;/code&gt; function to convert the &lt;code&gt;varResult.value&lt;/code&gt; array to a table. The resulting table has a single column named &lt;code&gt;Column1&lt;/code&gt; that contains the search results. The &lt;code&gt;Index&lt;/code&gt; function is then used to extract the first element of the &lt;code&gt;Column1&lt;/code&gt; array, which is another table. This table represents the &lt;code&gt;hitsContainers&lt;/code&gt; property of the search results.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Index&lt;/code&gt; function is used again to extract the first element of the &lt;code&gt;hitsContainers&lt;/code&gt; table, which is another table. This table represents the &lt;code&gt;hits&lt;/code&gt; property of the search results. Finally, the &lt;code&gt;Table&lt;/code&gt; function is used again to convert the &lt;code&gt;hits&lt;/code&gt; table to a table that can be displayed in the output pane of Visual Studio Code.&lt;/p&gt;
&lt;p&gt;Next, we&amp;rsquo;ll need to add a label control to the gallery and set its &lt;code&gt;Text&lt;/code&gt; property to the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ThisItem.Value.resource.subject
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In a gallery, each item is represented by a record that contains one or more fields. The &lt;code&gt;ThisItem&lt;/code&gt; function is used to reference the current item in the gallery.&lt;/p&gt;
&lt;p&gt;If we look at the output of the &lt;code&gt;Table&lt;/code&gt; function, we can see that each item in the gallery is represented by a record that contains a &lt;code&gt;resource&lt;/code&gt; field. The &lt;code&gt;resource&lt;/code&gt; field is an object that contains a &lt;code&gt;subject&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;Therefore, &lt;code&gt;ThisItem.Value.resource.subject&lt;/code&gt; is used to extract the subject of the resource from the current search result and display it in the label control.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this blog post, I&amp;rsquo;ve shown you how to use Graph API calls to Microsoft Search in PowerApps by using the Office365Groups.HttpRequest and the preview feature &amp;ldquo;ParseJSON function and untyped objects&amp;rdquo;. By following these steps, you&amp;rsquo;ll be able to retrieve data from external sources and use it within your PowerApps. We hope you found this post helpful! Let me know if you have any questions or comments.&lt;/p&gt;
&lt;h2 id=&#34;additional-resources&#34;&gt;Additional Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Some links to more information about Microsoft Search and the Graph API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft Graph Explorer - &lt;a class=&#34;link&#34; href=&#34;https://developer.microsoft.com/en-us/graph/graph-explorer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://developer.microsoft.com/en-us/graph/graph-explorer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Microsoft Graph API documentation - &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/graph/search-concept-overview&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/en-us/graph/search-concept-overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For testing / creating search queries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SharePoint Search Query Tool - &lt;a class=&#34;link&#34; href=&#34;https://github.com/pnp/PnP-Tools&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/pnp/PnP-Tools&lt;/a&gt; (Windows only)&lt;/li&gt;
&lt;li&gt;SP-Editor - Search Microsoft Edge Add-ons for it in the future as the Search part isn&amp;rsquo;t yet implemented in the meantime get the old Add-on from the Chrome Web Store (Windows, Mac, Linux)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
