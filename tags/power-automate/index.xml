<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Power Automate on The State of the Microsoft 365 Nation</title>
        <link>http://localhost:1313/tags/power-automate/</link>
        <description>Recent content in Power Automate on The State of the Microsoft 365 Nation</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sun, 28 Jan 2024 09:57:41 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/power-automate/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Social media content creator with AI Promts</title>
        <link>http://localhost:1313/post/2024/01/social-media-content-creator-ai-prompts/</link>
        <pubDate>Sun, 28 Jan 2024 09:57:41 +0000</pubDate>
        
        <guid>http://localhost:1313/post/2024/01/social-media-content-creator-ai-prompts/</guid>
        <description>&lt;img src="http://localhost:1313/post/2024/01/social-media-content-creator-ai-prompts/Header-Picture.jpeg" alt="Featured image of post Social media content creator with AI Promts" /&gt;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;For this tutorial you need the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A premium Power Automate account, e.g. a Power Automate per user plan or an Powerapps Comunity Plan&lt;/li&gt;
&lt;li&gt;A Social Media Account, e.g. Twitter, Mastodon, LinkedIn, etc.&lt;/li&gt;
&lt;li&gt;The Flows from one of my previous posts &lt;a class=&#34;link&#34; href=&#34;http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/&#34; &gt;Power Automate - How-to Posting on BlueSky and Mastodon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;create-ai-prompt-in-power-platform&#34;&gt;Create AI Prompt in Power Platform&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Go to &lt;a class=&#34;link&#34; href=&#34;https://flow.microsoft.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Power Automate&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on &lt;strong&gt;AI hub&lt;/strong&gt; in the left navigation

    
    
    
    &lt;img src=&#34;http://localhost:1313/post/2024/01/social-media-content-creator-ai-prompts/image.png&#34; alt=&#34;&#34; style=&#34;width: 30%; display: block;&#34;&gt;
    
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose &lt;strong&gt;AI Prompts&lt;/strong&gt;

    
    
    
    &lt;img src=&#34;http://localhost:1313/post/2024/01/social-media-content-creator-ai-prompts/image-1.png&#34; alt=&#34;&#34; style=&#34;width: 70%; display: block;&#34;&gt;
    
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on &lt;strong&gt;Create text using custom prompt&lt;/strong&gt;

    
    
    
    &lt;img src=&#34;http://localhost:1313/post/2024/01/social-media-content-creator-ai-prompts/image-2.png&#34; alt=&#34;&#34; style=&#34;width: 70%; display: block;&#34;&gt;
    
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose &lt;strong&gt;Custom task with custom prompts&lt;/strong&gt; and click on &lt;strong&gt;Create custom prompt&lt;/strong&gt;

    
    
    
    &lt;img src=&#34;http://localhost:1313/post/2024/01/social-media-content-creator-ai-prompts/SCR-20231221-ohvw.png&#34; alt=&#34;&#34; style=&#34;width: 60%; display: block;&#34;&gt;
    
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter a name for your AI Prompt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter your prompt (here is what I used for my prompt)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As an expert in social media, create me witty posts for my social networks
(Bluesky and Mastodon) with meaningful hashtags (Microsoft centric) about my newest Blog post
that you can find here: [Dynamic Value BlogURL] .
Also please take the lowest character count into consideration for the two networks.
Also create another post for LinkedIn that can be a bit longer.
Please create the posts in a way that will make my followers want to know more about the blog post
e.g. with examples or some insides.
Please also don&amp;rsquo;t add any BlogURL.
Please just response the post without any explanations. but in the following format:
{ &amp;ldquo;ShortPost&amp;rdquo; : Post text for BlueSky and Mastodon,
&amp;ldquo;LinkedInHeading&amp;rdquo; : Headline for LinkedIn Post,
&amp;ldquo;LinkedInPost&amp;rdquo; : Post text for LinkedIn
}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;create-the-flow-in-power-automate&#34;&gt;Create the Flow in Power Automate&lt;/h2&gt;
&lt;p&gt;



&lt;img src=&#34;http://localhost:1313/post/2024/01/social-media-content-creator-ai-prompts/image-3.png&#34; alt=&#34;&#34; style=&#34;width: 90%; display: block;&#34;&gt;


This is the Flow I created for writing post on social media. I will explain the steps in the following sections.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;ldquo;Manually trigger a flow&amp;rdquo; (this is the trigger)
Of course you could also use another trigger like schedule post from a calendar .&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Get Item&amp;rdquo; from SharePoint Online.
This step gets the URL of the newest blog post from my SharePoint Blog list.

    
    
    
    &lt;img src=&#34;http://localhost:1313/post/2024/01/social-media-content-creator-ai-prompts/image-4.png&#34; alt=&#34;&#34; style=&#34;width: 60%; display: block;&#34;&gt;
    
&lt;/li&gt;
&lt;li&gt;&amp;ldquo;AIBuilder Predict Custom Prompt&amp;rdquo; from Common Data Service for Apps.
This step uses the AI Prompt we created in the previous section to create the post text for the social media networks.

    
    
    
    &lt;img src=&#34;http://localhost:1313/post/2024/01/social-media-content-creator-ai-prompts/image-5.png&#34; alt=&#34;&#34; style=&#34;width: 60%; display: block;&#34;&gt;
    
&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Start and Wait for a Text Suggestion Approval&amp;rdquo; from Approvals.
This step waits for the approval of the post text. I use this step to check the post text before it is posted on social media.
If you don&amp;rsquo;t want to check the post text before it is posted on social media you can skip this step and go directly to the next step.

    
    
    
    &lt;img src=&#34;http://localhost:1313/post/2024/01/social-media-content-creator-ai-prompts/image-6.png&#34; alt=&#34;&#34; style=&#34;width: 60%; display: block;&#34;&gt;
    
&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Parse JSON&amp;rdquo;.
This step parses the JSON from the previous step and creates the variables for the post text.
Copy the JSON from the AI Builder step and paste it into the &amp;ldquo;Schema&amp;rdquo; field.

    
    
    
    &lt;img src=&#34;http://localhost:1313/post/2024/01/social-media-content-creator-ai-prompts/image-7.png&#34; alt=&#34;&#34; style=&#34;width: 60%; display: block;&#34;&gt;
    
&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Condition&amp;rdquo;.
This step checks if we approved the AI generated post text or not. If we approved the post text it will go to the next step. If we didn&amp;rsquo;t approve the post text it will go to the &amp;ldquo;Condition - No&amp;rdquo; step which will lead to the end of the Flow.

    
    
    
    &lt;img src=&#34;http://localhost:1313/post/2024/01/social-media-content-creator-ai-prompts/image-8.png&#34; alt=&#34;&#34; style=&#34;width: 60%; display: block;&#34;&gt;
    
&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Apply to each&amp;rdquo;.
This step will create a post for each social media network that we put in the Column in the SharPoint list. With the &amp;ldquo;switch&amp;rdquo; step we are running the &amp;ldquo;Run a Child Flow&amp;rdquo; step to create the post for each needed social media network.

    
    
    
    &lt;img src=&#34;http://localhost:1313/post/2024/01/social-media-content-creator-ai-prompts/image-9.png&#34; alt=&#34;&#34; style=&#34;width: 80%; display: block;&#34;&gt;
    

As you can see this is a very simple Flow. But it will save you a lot of time and you can be sure that your post text is correct.
Now let&amp;rsquo;s see how you will use this Flow to create your social media posts. Please leave a comment if you have any questions or suggestions. Also please share your use cases for this Flow.&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Power Automate - How-to Posting on BlueSky and Mastodon</title>
        <link>http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/</link>
        <pubDate>Sun, 26 Nov 2023 21:25:48 +0000</pubDate>
        
        <guid>http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/</guid>
        <description>&lt;img src="http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/Blog-Header.jpeg" alt="Featured image of post Power Automate - How-to Posting on BlueSky and Mastodon" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Do you want to save time and effort by automating your social media posts across different platforms? Do you want to learn how to use Microsoft Power Automate to post on BlueSky and Mastodon with ease? If so, this guide is for you.&lt;/p&gt;
&lt;h2 id=&#34;integrating-mastodon-with-hugo-blog-for-comment-management&#34;&gt;Integrating Mastodon with Hugo Blog for Comment Management&lt;/h2&gt;
&lt;p&gt;To streamline the management of comments on my Hugo blog, I have implemented a Mastodon workflow. This workflow allows for easy retrieval of Mastodon post IDs. I use Mastadon as my comments platform as described in &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://carlschwan.eu/2020/12/29/adding-comments-to-your-static-blog-with-mastodon&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Carl Schwan&amp;rsquo;s blog post&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;creating-the-flows&#34;&gt;Creating the Flows:&lt;/h2&gt;
&lt;p&gt;I will provide you a detailed breakdown suitable for a custom implementation. This guide will ensure even those not deeply familiar with technical details can follow along.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;detailed-guide-for-creating-a-custom-bluesky-posting-workflow-in-microsoft-power-automate&#34;&gt;Detailed guide for creating a Custom BlueSky Posting Workflow in Microsoft Power Automate&lt;/h2&gt;
&lt;h3 id=&#34;introduction-1&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;This section focuses on setting up a custom workflow in Microsoft Power Automate for posting updates to BlueSky, a social media platform. The workflow involves creating a session, posting content, and handling responses. At the time of writing, BlueSky is still invite-only, so you&amp;rsquo;ll need to request access to the platform before you can use this workflow.
If you need access plesae contact me via &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/olli_menzel&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Twitter&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/olivermenzel/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LinkedIn&lt;/a&gt; or in the comments down below.&lt;/p&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Access to Microsoft Power Automate.&lt;/li&gt;
&lt;li&gt;BlueSky account credentials and API access.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tips&#34;&gt;Tips:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ensure you correctly handle the authentication and authorization part, particularly the management of JWT tokens.&lt;/li&gt;
&lt;li&gt;Test each part separately to ensure they work as expected.&lt;/li&gt;
&lt;li&gt;Be mindful of the data structure expected by BlueSky&amp;rsquo;s API when creating posts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should give you a good starting point for rebuilding the BlueSky posting workflow in Power Automate. Adjust the steps according to your specific requirements and the exact response structure of the BlueSky API.&lt;/p&gt;
&lt;h3 id=&#34;create-a-new-flow-in-power-automate&#34;&gt;Create a New Flow in Power Automate&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Log in&lt;/strong&gt; to &lt;a class=&#34;link&#34; href=&#34;https://flow.microsoft.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Power Automate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Navigate to &lt;strong&gt;My flows&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;New flow&lt;/strong&gt; and select &lt;strong&gt;Instant cloud flow&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Name your flow, e.g., &amp;ldquo;Send to BlueSky&amp;rdquo;, and select the &lt;strong&gt;Manually trigger a flow&lt;/strong&gt; trigger. Click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;steps-and-expressions-bluesky&#34;&gt;Steps and Expressions (BlueSky)):&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Trigger: Manual trigger with text, link, and heading inputs.




&lt;img src=&#34;http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/image.png&#34; alt=&#34;&#34; style=&#34;width: 50%; display: block;&#34;&gt;

&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initialize Variable - Complete Text:




&lt;img src=&#34;http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/image-1.png&#34; alt=&#34;&#34; style=&#34;width: 50%; display: block;&#34;&gt;


Merge the ShortText and link inputs into a single string.
- Expression: &lt;code&gt;@{triggerBody()?[&#39;text&#39;]} @{triggerBody()?[&#39;text_1&#39;]}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initialize Variable - Remove Line Breaks:




&lt;img src=&#34;http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/image-2.png&#34; alt=&#34;&#34; style=&#34;width: 50%; display: block;&#34;&gt;


- Expression: &lt;code&gt;@{UriComponentToString(replace(uriComponent(triggerBody()?[&#39;text&#39;]) &#39;%0A&#39; &#39;&#39;))}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initialize Variable - Facets: As an array variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compose - Get Single Words:




&lt;img src=&#34;http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/image-3.png&#34; alt=&#34;&#34; style=&#34;width: 50%; display: block;&#34;&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Expression: &lt;code&gt;@split(variables(&#39;Text&#39;),&#39; &#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apply to Each: Based on &amp;lsquo;Compose - Get Single Words&amp;rsquo; output.




&lt;img src=&#34;http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/image-4.png&#34; alt=&#34;&#34; style=&#34;width: 50%; display: block;&#34;&gt;

&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Condition: Checks for hashtag (#) in each item.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Expression: &lt;code&gt;startsWith(@items(&#39;Apply_to_each&#39;),&#39;#&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Append to Array Variable - Hashtags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Expression for tag:
&lt;code&gt;{ &amp;quot;index&amp;quot;: { &amp;quot;byteStart&amp;quot;: @{indexOf(triggerBody()[&#39;text&#39;], item())}, &amp;quot;byteEnd&amp;quot;: @{add(indexOf(triggerBody()[&#39;text&#39;],item()),length(item()))} }, &amp;quot;features&amp;quot;: [ { &amp;quot;$type&amp;quot;: &amp;quot;app.bsky.richtext.facet#tag&amp;quot;, &amp;quot;tag&amp;quot;: @{item()} } ] }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Append to Array Variable - Mentions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Expression for Links:

    
    
    
    &lt;img src=&#34;http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/image-5.png&#34; alt=&#34;&#34; style=&#34;width: 50%; display: block;&#34;&gt;
    

&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;byteStart&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;indexOf(variables(&amp;#39;Complete&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Text&amp;#39;),&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;item())&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;byteEnd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;add(indexOf(variables(&amp;#39;Complete&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Text&amp;#39;),item()),length(item()))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;features&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;$type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;app.bsky.richtext.facet#mention&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;handle&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;@{item()}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;byteStart&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;indexOf(variables(&amp;#39;Complete&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Text&amp;#39;),&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;triggerBody()[&amp;#39;text_1&amp;#39;])&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;byteEnd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;add(indexOf(variables(&amp;#39;Complete&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;Text&amp;#39;),triggerBody()[&amp;#39;text_1&amp;#39;]),length(triggerBody()[&amp;#39;text_1&amp;#39;]))&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;features&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;$type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;app.bsky.richtext.facet#link&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;uri&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;@{triggerBody()[&amp;#39;text_1&amp;#39;]}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;
The expression uses the &lt;strong&gt;Complete Text&lt;/strong&gt; variable to find the position of the link in the text using the &lt;strong&gt;indexOf&lt;/strong&gt; function. It then creates the link facet using the &lt;strong&gt;link&lt;/strong&gt; input from the trigger.
For more information on the BlueSky API, refer to the &lt;a class=&#34;link&#34; href=&#34;https://atproto.com/blog/create-post#post-record-structure&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP - Create Session:




&lt;img src=&#34;http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/image-6.png&#34; alt=&#34;&#34; style=&#34;width: 50%; display: block;&#34;&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URI: &lt;code&gt;https://bsky.social/xrpc/com.atproto.server.createSession&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Body: &lt;code&gt;{ &amp;quot;identifier&amp;quot;: &amp;quot;@{parameters(&#39;BlueSky HandleName&#39;)}&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;@{parameters(&#39;BlueSky App Password&#39;)}&amp;quot; }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parse JSON - New Session Response:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tipp:&lt;/strong&gt; Use the &lt;strong&gt;Generate from sample&lt;/strong&gt; option to generate the schema.
To get the sample, you can use the &lt;strong&gt;Run Flow&lt;/strong&gt; option and copy the response from the &lt;strong&gt;Run History&lt;/strong&gt;.

    
    
    
    &lt;img src=&#34;http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/image-7.png&#34; alt=&#34;&#34; style=&#34;width: 50%; display: block;&#34;&gt;
    
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP - Post Post:




&lt;img src=&#34;http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/image-8.png&#34; alt=&#34;&#34; style=&#34;width: 50%; display: block;&#34;&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URI: &lt;code&gt;https://bsky.social/xrpc/com.atproto.repo.createRecord&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Body: &lt;code&gt;{ &amp;quot;repo&amp;quot;: &amp;quot;menzel.it&amp;quot;, &amp;quot;collection&amp;quot;: &amp;quot;app.bsky.feed.post&amp;quot;, &amp;quot;record&amp;quot;: { &amp;quot;createdAt&amp;quot;: &amp;quot;@utcNow()&amp;quot;, &amp;quot;facets&amp;quot;: &amp;quot;@if(equals(length(variables(&#39;facets&#39;)),0),&#39;[]&#39;,variables(&#39;facets&#39;))&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;@variables(&#39;Complete Text&#39;)&amp;quot; } }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Authentication: Requires an API key from BlueSky Social&amp;rsquo;s account settings​​.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;send2mastodon&#34;&gt;Send2Mastodon&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s the step-by-step tutorial:&lt;/p&gt;
&lt;h3 id=&#34;prerequisites-1&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Access to Microsoft Power Automate.&lt;/li&gt;
&lt;li&gt;Microsoft Teams set up.&lt;/li&gt;
&lt;li&gt;Mastodon account and API key.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;create-a-new-flow-in-power-automate-1&#34;&gt;Create a New Flow in Power Automate&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Log in&lt;/strong&gt; to &lt;a class=&#34;link&#34; href=&#34;https://flow.microsoft.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Power Automate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Navigate to &lt;strong&gt;My flows&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;New flow&lt;/strong&gt; and select &lt;strong&gt;Instant cloud flow&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Name your flow, e.g., &amp;ldquo;Send to Mastodon&amp;rdquo;, and select the &lt;strong&gt;Manually trigger a flow&lt;/strong&gt; trigger. Click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;steps-and-expressions&#34;&gt;Steps and Expressions&lt;/h3&gt;
&lt;p&gt;To recreate the workflow in Power Automate based on the provided JSON file, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Trigger: Manual trigger with text, link, and heading inputs.




&lt;img src=&#34;http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/image-9.png&#34; alt=&#34;&#34; style=&#34;width: 50%; display: block;&#34;&gt;

&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP Request to Mastodon API:




&lt;img src=&#34;http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/image-10.png&#34; alt=&#34;&#34; style=&#34;width: 50%; display: block;&#34;&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add an HTTP action to post a status update to Mastodon.&lt;/li&gt;
&lt;li&gt;Set the method to &lt;code&gt;POST&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Set the URI to &lt;code&gt;https://[Mastodon Server Link]/api/v1/statuses&lt;/code&gt;
replace &lt;code&gt;[Mastodon Server Link]&lt;/code&gt; with the actual server link.&lt;br&gt;
I used environment variables for this as I store everything in a solution.&lt;/li&gt;
&lt;li&gt;Add headers:
&lt;ul&gt;
&lt;li&gt;Authorization: &lt;code&gt;Bearer [Mastodon-Key]&lt;/code&gt; (replace &lt;code&gt;[Mastodon-Key]&lt;/code&gt; with the actual key).&lt;/li&gt;
&lt;li&gt;Content-Type: &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set the body to send the status and link: &lt;code&gt;&amp;quot;status=@{triggerBody()?[&#39;text&#39;]}\n@{triggerBody()?[&#39;text_1&#39;]}&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parse JSON:




&lt;img src=&#34;http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/image-11.png&#34; alt=&#34;&#34; style=&#34;width: 50%; display: block;&#34;&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After the HTTP request, add a &amp;ldquo;Parse JSON&amp;rdquo; action.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;@body(&#39;HTTP&#39;)&lt;/code&gt; as the content.&lt;/li&gt;
&lt;li&gt;Define the schema based on the expected response from the Mastodon API.
&lt;strong&gt;Tipp:&lt;/strong&gt; Use the &lt;strong&gt;Generate from sample&lt;/strong&gt; option to generate the schema.
To get the sample, you can use the &lt;strong&gt;Run Flow&lt;/strong&gt; option and copy the response from the &lt;strong&gt;Run History&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post Message in Teams Channel:




&lt;img src=&#34;http://localhost:1313/post/2023/11/power-automate-posting-bluesky-mastodon/image-12.png&#34; alt=&#34;&#34; style=&#34;width: 50%; display: block;&#34;&gt;

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add an action to post a message in a Teams chat or channel.&lt;/li&gt;
&lt;li&gt;Configure the message to include the Mastodon toot ID and the heading from the trigger inputs.&lt;/li&gt;
&lt;li&gt;Use the expression &lt;code&gt;@{triggerBody()?[&#39;text_2&#39;]}&lt;/code&gt; for the heading and &lt;code&gt;@{body(&#39;Parse_JSON&#39;)?[&#39;id&#39;]}&lt;/code&gt; for the Mastodon toot ID.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Final Steps:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Save and test the flow to ensure it works as expected.&lt;/li&gt;
&lt;li&gt;Make any necessary adjustments to the expressions and configurations based on your specific requirements and the structure of your Mastodon instance and Teams setup.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This guide provides an overview of using Microsoft Power Automate to automate social media posts across various platforms, like BlueSky, Mastodon and LinkedIn. I hope you found this guide useful and that it helps you to get started with Power Automate. If you have any questions or feedback, please leave a comment below. Also you can combine this with a SharePoint list to create a queue for your posts. If this is interessting for you I will cover this in a future post.
I added the Flows to my GitHub repo so you can download them and import them into your environment.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://atproto.com/blog/create-post#post-record-structure&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;BlueSky API Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.joinmastodon.org/user/posting/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mastodon API Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ollimenzel/Blog-Files&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flows for download on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
